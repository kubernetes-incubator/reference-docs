# Translations for Kubernetes API specifications.
#
msgid ""
msgstr ""
"Project-Id-Version: io.k8s.api.apps.v1\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI +ZONE\n"
"Last-Translator: Automatically generated\n"
"Language-Team: none\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: fr\n"
"Plural-Forms: nplurals=2; plural=(n > 1);\n"

#: ControllerRevision
msgid "ControllerRevision implements an immutable snapshot of state data. Clients are responsible for serializing and deserializing the objects that contain their internal state. Once a ControllerRevision has been successfully created, it can not be updated. The API Server will fail validation of all requests that attempt to mutate the Data field. ControllerRevisions may, however, be deleted. Note that, due to its use by both the DaemonSet and StatefulSet controllers for update and rollback, this object is beta. However, it may be subject to name and representation changes in future releases, and clients should not depend on its stability. It is primarily for internal use by controllers."
msgstr ""

#: ControllerRevision.apiVersion
msgid "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
msgstr ""

#: ControllerRevision.data
msgid "Data is the serialized representation of the state."
msgstr ""

#: ControllerRevision.kind
msgid "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
msgstr ""

#: ControllerRevision.metadata
msgid "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata"
msgstr ""

#: ControllerRevision.revision
msgid "Revision indicates the revision of the state represented by Data."
msgstr ""

#: ControllerRevisionList
msgid "ControllerRevisionList is a resource containing a list of ControllerRevision objects."
msgstr ""

# ControllerRevisionList.apiVersion
# same as ControllerRevision.apiVersion
#: ControllerRevisionList.items
msgid "Items is the list of ControllerRevisions"
msgstr ""

# ControllerRevisionList.kind
# same as ControllerRevision.kind
#: ControllerRevisionList.metadata
msgid "More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata"
msgstr ""

#: DaemonSet
msgid "DaemonSet represents the configuration of a daemon set."
msgstr ""

# DaemonSet.apiVersion
# same as ControllerRevision.apiVersion
# DaemonSet.kind
# same as ControllerRevision.kind
# DaemonSet.metadata
# same as ControllerRevision.metadata
#: DaemonSet.spec
msgid "The desired behavior of this daemon set. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status"
msgstr ""

#: DaemonSet.status
msgid "The current status of this daemon set. This data may be out of date by some window of time. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status"
msgstr ""

#: DaemonSetCondition
msgid "DaemonSetCondition describes the state of a DaemonSet at a certain point."
msgstr ""

#: DaemonSetCondition.lastTransitionTime
msgid "Last time the condition transitioned from one status to another."
msgstr ""

#: DaemonSetCondition.message
msgid "A human readable message indicating details about the transition."
msgstr ""

#: DaemonSetCondition.reason
msgid "The reason for the condition's last transition."
msgstr ""

#: DaemonSetCondition.status
msgid "Status of the condition, one of True, False, Unknown."
msgstr ""

#: DaemonSetCondition.type
msgid "Type of DaemonSet condition."
msgstr ""

#: DaemonSetList
msgid "DaemonSetList is a collection of daemon sets."
msgstr ""

# DaemonSetList.apiVersion
# same as ControllerRevision.apiVersion
#: DaemonSetList.items
msgid "A list of daemon sets."
msgstr ""

# DaemonSetList.kind
# same as ControllerRevision.kind
#: DaemonSetList.metadata
msgid "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata"
msgstr ""

#: DaemonSetSpec
msgid "DaemonSetSpec is the specification of a daemon set."
msgstr ""

#: DaemonSetSpec.minReadySeconds
msgid "The minimum number of seconds for which a newly created DaemonSet pod should be ready without any of its container crashing, for it to be considered available. Defaults to 0 (pod will be considered available as soon as it is ready)."
msgstr ""

#: DaemonSetSpec.revisionHistoryLimit
msgid "The number of old history to retain to allow rollback. This is a pointer to distinguish between explicit zero and not specified. Defaults to 10."
msgstr ""

#: DaemonSetSpec.selector
msgid "A label query over pods that are managed by the daemon set. Must match in order to be controlled. It must match the pod template's labels. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors"
msgstr ""

#: DaemonSetSpec.template
msgid "An object that describes the pod that will be created. The DaemonSet will create exactly one copy of this pod on every node that matches the template's node selector (or on every node if no node selector is specified). More info: https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller#pod-template"
msgstr ""

#: DaemonSetSpec.updateStrategy
msgid "An update strategy to replace existing DaemonSet pods with new pods."
msgstr ""

#: DaemonSetStatus
msgid "DaemonSetStatus represents the current status of a daemon set."
msgstr ""

#: DaemonSetStatus.collisionCount
msgid "Count of hash collisions for the DaemonSet. The DaemonSet controller uses this field as a collision avoidance mechanism when it needs to create the name for the newest ControllerRevision."
msgstr ""

#: DaemonSetStatus.conditions
msgid "Represents the latest available observations of a DaemonSet's current state."
msgstr ""

#: DaemonSetStatus.currentNumberScheduled
msgid "The number of nodes that are running at least 1 daemon pod and are supposed to run the daemon pod. More info: https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/"
msgstr ""

#: DaemonSetStatus.desiredNumberScheduled
msgid "The total number of nodes that should be running the daemon pod (including nodes correctly running the daemon pod). More info: https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/"
msgstr ""

#: DaemonSetStatus.numberAvailable
msgid "The number of nodes that should be running the daemon pod and have one or more of the daemon pod running and available (ready for at least spec.minReadySeconds)"
msgstr ""

#: DaemonSetStatus.numberMisscheduled
msgid "The number of nodes that are running the daemon pod, but are not supposed to run the daemon pod. More info: https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/"
msgstr ""

#: DaemonSetStatus.numberReady
msgid "The number of nodes that should be running the daemon pod and have one or more of the daemon pod running and ready."
msgstr ""

#: DaemonSetStatus.numberUnavailable
msgid "The number of nodes that should be running the daemon pod and have none of the daemon pod running and available (ready for at least spec.minReadySeconds)"
msgstr ""

#: DaemonSetStatus.observedGeneration
msgid "The most recent generation observed by the daemon set controller."
msgstr ""

#: DaemonSetStatus.updatedNumberScheduled
msgid "The total number of nodes that are running updated daemon pod"
msgstr ""

#: DaemonSetUpdateStrategy
msgid "DaemonSetUpdateStrategy is a struct used to control the update strategy for a DaemonSet."
msgstr ""

#: DaemonSetUpdateStrategy.rollingUpdate
msgid "Rolling update config params. Present only if type = \"RollingUpdate\"."
msgstr ""

#: DaemonSetUpdateStrategy.type
msgid "Type of daemon set update. Can be \"RollingUpdate\" or \"OnDelete\". Default is RollingUpdate."
msgstr ""

#: Deployment
msgid "Deployment enables declarative updates for Pods and ReplicaSets."
msgstr ""

# Deployment.apiVersion
# same as ControllerRevision.apiVersion
# Deployment.kind
# same as ControllerRevision.kind
#: Deployment.metadata
msgid "Standard object metadata."
msgstr ""

#: Deployment.spec
msgid "Specification of the desired behavior of the Deployment."
msgstr ""

#: Deployment.status
msgid "Most recently observed status of the Deployment."
msgstr ""

#: DeploymentCondition
msgid "DeploymentCondition describes the state of a deployment at a certain point."
msgstr ""

# DeploymentCondition.lastTransitionTime
# same as DaemonSetCondition.lastTransitionTime
#: DeploymentCondition.lastUpdateTime
msgid "The last time this condition was updated."
msgstr ""

# DeploymentCondition.message
# same as DaemonSetCondition.message
# DeploymentCondition.reason
# same as DaemonSetCondition.reason
# DeploymentCondition.status
# same as DaemonSetCondition.status
#: DeploymentCondition.type
msgid "Type of deployment condition."
msgstr ""

#: DeploymentList
msgid "DeploymentList is a list of Deployments."
msgstr ""

# DeploymentList.apiVersion
# same as ControllerRevision.apiVersion
#: DeploymentList.items
msgid "Items is the list of Deployments."
msgstr ""

# DeploymentList.kind
# same as ControllerRevision.kind
#: DeploymentList.metadata
msgid "Standard list metadata."
msgstr ""

#: DeploymentSpec
msgid "DeploymentSpec is the specification of the desired behavior of the Deployment."
msgstr ""

#: DeploymentSpec.minReadySeconds
msgid "Minimum number of seconds for which a newly created pod should be ready without any of its container crashing, for it to be considered available. Defaults to 0 (pod will be considered available as soon as it is ready)"
msgstr ""

#: DeploymentSpec.paused
msgid "Indicates that the deployment is paused."
msgstr ""

#: DeploymentSpec.progressDeadlineSeconds
msgid "The maximum time in seconds for a deployment to make progress before it is considered to be failed. The deployment controller will continue to process failed deployments and a condition with a ProgressDeadlineExceeded reason will be surfaced in the deployment status. Note that progress will not be estimated during the time a deployment is paused. Defaults to 600s."
msgstr ""

#: DeploymentSpec.replicas
msgid "Number of desired pods. This is a pointer to distinguish between explicit zero and not specified. Defaults to 1."
msgstr ""

#: DeploymentSpec.revisionHistoryLimit
msgid "The number of old ReplicaSets to retain to allow rollback. This is a pointer to distinguish between explicit zero and not specified. Defaults to 10."
msgstr ""

#: DeploymentSpec.selector
msgid "Label selector for pods. Existing ReplicaSets whose pods are selected by this will be the ones affected by this deployment. It must match the pod template's labels."
msgstr ""

#: DeploymentSpec.strategy
msgid "The deployment strategy to use to replace existing pods with new ones."
msgstr ""

#: DeploymentSpec.template
msgid "Template describes the pods that will be created."
msgstr ""

#: DeploymentStatus
msgid "DeploymentStatus is the most recently observed status of the Deployment."
msgstr ""

#: DeploymentStatus.availableReplicas
msgid "Total number of available pods (ready for at least minReadySeconds) targeted by this deployment."
msgstr ""

#: DeploymentStatus.collisionCount
msgid "Count of hash collisions for the Deployment. The Deployment controller uses this field as a collision avoidance mechanism when it needs to create the name for the newest ReplicaSet."
msgstr ""

#: DeploymentStatus.conditions
msgid "Represents the latest available observations of a deployment's current state."
msgstr ""

#: DeploymentStatus.observedGeneration
msgid "The generation observed by the deployment controller."
msgstr ""

#: DeploymentStatus.readyReplicas
msgid "Total number of ready pods targeted by this deployment."
msgstr ""

#: DeploymentStatus.replicas
msgid "Total number of non-terminated pods targeted by this deployment (their labels match the selector)."
msgstr ""

#: DeploymentStatus.unavailableReplicas
msgid "Total number of unavailable pods targeted by this deployment. This is the total number of pods that are still required for the deployment to have 100% available capacity. They may either be pods that are running but not yet available or pods that still have not been created."
msgstr ""

#: DeploymentStatus.updatedReplicas
msgid "Total number of non-terminated pods targeted by this deployment that have the desired template spec."
msgstr ""

#: DeploymentStrategy
msgid "DeploymentStrategy describes how to replace existing pods with new ones."
msgstr ""

#: DeploymentStrategy.rollingUpdate
msgid "Rolling update config params. Present only if DeploymentStrategyType = RollingUpdate."
msgstr ""

#: DeploymentStrategy.type
msgid "Type of deployment. Can be \"Recreate\" or \"RollingUpdate\". Default is RollingUpdate."
msgstr ""

#: ReplicaSet
msgid "ReplicaSet ensures that a specified number of pod replicas are running at any given time."
msgstr ""

# ReplicaSet.apiVersion
# same as ControllerRevision.apiVersion
# ReplicaSet.kind
# same as ControllerRevision.kind
#: ReplicaSet.metadata
msgid "If the Labels of a ReplicaSet are empty, they are defaulted to be the same as the Pod(s) that the ReplicaSet manages. Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata"
msgstr ""

#: ReplicaSet.spec
msgid "Spec defines the specification of the desired behavior of the ReplicaSet. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status"
msgstr ""

#: ReplicaSet.status
msgid "Status is the most recently observed status of the ReplicaSet. This data may be out of date by some window of time. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status"
msgstr ""

#: ReplicaSetCondition
msgid "ReplicaSetCondition describes the state of a replica set at a certain point."
msgstr ""

#: ReplicaSetCondition.lastTransitionTime
msgid "The last time the condition transitioned from one status to another."
msgstr ""

# ReplicaSetCondition.message
# same as DaemonSetCondition.message
# ReplicaSetCondition.reason
# same as DaemonSetCondition.reason
# ReplicaSetCondition.status
# same as DaemonSetCondition.status
#: ReplicaSetCondition.type
msgid "Type of replica set condition."
msgstr ""

#: ReplicaSetList
msgid "ReplicaSetList is a collection of ReplicaSets."
msgstr ""

# ReplicaSetList.apiVersion
# same as ControllerRevision.apiVersion
#: ReplicaSetList.items
msgid "List of ReplicaSets. More info: https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller"
msgstr ""

# ReplicaSetList.kind
# same as ControllerRevision.kind
#: ReplicaSetList.metadata
msgid "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
msgstr ""

#: ReplicaSetSpec
msgid "ReplicaSetSpec is the specification of a ReplicaSet."
msgstr ""

# ReplicaSetSpec.minReadySeconds
# same as DeploymentSpec.minReadySeconds
#: ReplicaSetSpec.replicas
msgid "Replicas is the number of desired replicas. This is a pointer to distinguish between explicit zero and unspecified. Defaults to 1. More info: https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller/#what-is-a-replicationcontroller"
msgstr ""

#: ReplicaSetSpec.selector
msgid "Selector is a label query over pods that should match the replica count. Label keys and values that must match in order to be controlled by this replica set. It must match the pod template's labels. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors"
msgstr ""

#: ReplicaSetSpec.template
msgid "Template is the object that describes the pod that will be created if insufficient replicas are detected. More info: https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller#pod-template"
msgstr ""

#: ReplicaSetStatus
msgid "ReplicaSetStatus represents the current status of a ReplicaSet."
msgstr ""

#: ReplicaSetStatus.availableReplicas
msgid "The number of available replicas (ready for at least minReadySeconds) for this replica set."
msgstr ""

#: ReplicaSetStatus.conditions
msgid "Represents the latest available observations of a replica set's current state."
msgstr ""

#: ReplicaSetStatus.fullyLabeledReplicas
msgid "The number of pods that have labels matching the labels of the pod template of the replicaset."
msgstr ""

#: ReplicaSetStatus.observedGeneration
msgid "ObservedGeneration reflects the generation of the most recently observed ReplicaSet."
msgstr ""

#: ReplicaSetStatus.readyReplicas
msgid "The number of ready replicas for this replica set."
msgstr ""

#: ReplicaSetStatus.replicas
msgid "Replicas is the most recently oberved number of replicas. More info: https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller/#what-is-a-replicationcontroller"
msgstr ""

#: RollingUpdateDaemonSet
msgid "Spec to control the desired behavior of daemon set rolling update."
msgstr ""

#: RollingUpdateDaemonSet.maxSurge
msgid "The maximum number of nodes with an existing available DaemonSet pod that can have an updated DaemonSet pod during during an update. Value can be an absolute number (ex: 5) or a percentage of desired pods (ex: 10%). This can not be 0 if MaxUnavailable is 0. Absolute number is calculated from percentage by rounding up to a minimum of 1. Default value is 0. Example: when this is set to 30%, at most 30% of the total number of nodes that should be running the daemon pod (i.e. status.desiredNumberScheduled) can have their a new pod created before the old pod is marked as deleted. The update starts by launching new pods on 30% of nodes. Once an updated pod is available (Ready for at least minReadySeconds) the old DaemonSet pod on that node is marked deleted. If the old pod becomes unavailable for any reason (Ready transitions to false, is evicted, or is drained) an updated pod is immediatedly created on that node without considering surge limits. Allowing surge implies the possibility that the resources consumed by the daemonset on any given node can double if the readiness check fails, and so resource intensive daemonsets should take into account that they may cause evictions during disruption. This is an alpha field and requires enabling DaemonSetUpdateSurge feature gate."
msgstr ""

#: RollingUpdateDaemonSet.maxUnavailable
msgid "The maximum number of DaemonSet pods that can be unavailable during the update. Value can be an absolute number (ex: 5) or a percentage of total number of DaemonSet pods at the start of the update (ex: 10%). Absolute number is calculated from percentage by rounding down to a minimum of one. This cannot be 0 if MaxSurge is 0 Default value is 1. Example: when this is set to 30%, at most 30% of the total number of nodes that should be running the daemon pod (i.e. status.desiredNumberScheduled) can have their pods stopped for an update at any given time. The update starts by stopping at most 30% of those DaemonSet pods and then brings up new DaemonSet pods in their place. Once the new pods are available, it then proceeds onto other DaemonSet pods, thus ensuring that at least 70% of original number of DaemonSet pods are available at all times during the update."
msgstr ""

#: RollingUpdateDeployment
msgid "Spec to control the desired behavior of rolling update."
msgstr ""

#: RollingUpdateDeployment.maxSurge
msgid "The maximum number of pods that can be scheduled above the desired number of pods. Value can be an absolute number (ex: 5) or a percentage of desired pods (ex: 10%). This can not be 0 if MaxUnavailable is 0. Absolute number is calculated from percentage by rounding up. Defaults to 25%. Example: when this is set to 30%, the new ReplicaSet can be scaled up immediately when the rolling update starts, such that the total number of old and new pods do not exceed 130% of desired pods. Once old pods have been killed, new ReplicaSet can be scaled up further, ensuring that total number of pods running at any time during the update is at most 130% of desired pods."
msgstr ""

#: RollingUpdateDeployment.maxUnavailable
msgid "The maximum number of pods that can be unavailable during the update. Value can be an absolute number (ex: 5) or a percentage of desired pods (ex: 10%). Absolute number is calculated from percentage by rounding down. This can not be 0 if MaxSurge is 0. Defaults to 25%. Example: when this is set to 30%, the old ReplicaSet can be scaled down to 70% of desired pods immediately when the rolling update starts. Once new pods are ready, old ReplicaSet can be scaled down further, followed by scaling up the new ReplicaSet, ensuring that the total number of pods available at all times during the update is at least 70% of desired pods."
msgstr ""

#: RollingUpdateStatefulSetStrategy
msgid "RollingUpdateStatefulSetStrategy is used to communicate parameter for RollingUpdateStatefulSetStrategyType."
msgstr ""

#: RollingUpdateStatefulSetStrategy.partition
msgid "Partition indicates the ordinal at which the StatefulSet should be partitioned. Default value is 0."
msgstr ""

#: StatefulSet
msgid "StatefulSet represents a set of pods with consistent identities. Identities are defined as: - Network: A single stable DNS and hostname. - Storage: As many VolumeClaims as requested.The StatefulSet guarantees that a given network identity will always map to the same storage identity."
msgstr ""

# StatefulSet.apiVersion
# same as ControllerRevision.apiVersion
# StatefulSet.kind
# same as ControllerRevision.kind
#: StatefulSet.spec
msgid "Spec defines the desired identities of pods in this set."
msgstr ""

#: StatefulSet.status
msgid "Status is the current status of Pods in this StatefulSet. This data may be out of date by some window of time."
msgstr ""

#: StatefulSetCondition
msgid "StatefulSetCondition describes the state of a statefulset at a certain point."
msgstr ""

# StatefulSetCondition.lastTransitionTime
# same as DaemonSetCondition.lastTransitionTime
# StatefulSetCondition.message
# same as DaemonSetCondition.message
# StatefulSetCondition.reason
# same as DaemonSetCondition.reason
# StatefulSetCondition.status
# same as DaemonSetCondition.status
#: StatefulSetCondition.type
msgid "Type of statefulset condition."
msgstr ""

#: StatefulSetList
msgid "StatefulSetList is a collection of StatefulSets."
msgstr ""

# StatefulSetList.apiVersion
# same as ControllerRevision.apiVersion
# StatefulSetList.kind
# same as ControllerRevision.kind
#: StatefulSetSpec
msgid "A StatefulSetSpec is the specification of a StatefulSet."
msgstr ""

#: StatefulSetSpec.podManagementPolicy
msgid "podManagementPolicy controls how pods are created during initial scale up, when replacing pods on nodes, or when scaling down. The default policy is `OrderedReady`, where pods are created in increasing order (pod-0, then pod-1, etc) and the controller will wait until each pod is ready before continuing. When scaling down, the pods are removed in the opposite order. The alternative policy is `Parallel` which will create pods in parallel to match the desired scale without waiting, and on scale down will delete all pods at once."
msgstr ""

#: StatefulSetSpec.replicas
msgid "replicas is the desired number of replicas of the given Template. These are replicas in the sense that they are instantiations of the same Template, but individual replicas also have a consistent identity. If unspecified, defaults to 1."
msgstr ""

#: StatefulSetSpec.revisionHistoryLimit
msgid "revisionHistoryLimit is the maximum number of revisions that will be maintained in the StatefulSet's revision history. The revision history consists of all revisions not represented by a currently applied StatefulSetSpec version. The default value is 10."
msgstr ""

#: StatefulSetSpec.selector
msgid "selector is a label query over pods that should match the replica count. It must match the pod template's labels. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors"
msgstr ""

#: StatefulSetSpec.serviceName
msgid "serviceName is the name of the service that governs this StatefulSet. This service must exist before the StatefulSet, and is responsible for the network identity of the set. Pods get DNS/hostnames that follow the pattern: pod-specific-string.serviceName.default.svc.cluster.local where \"pod-specific-string\" is managed by the StatefulSet controller."
msgstr ""

#: StatefulSetSpec.template
msgid "template is the object that describes the pod that will be created if insufficient replicas are detected. Each pod stamped out by the StatefulSet will fulfill this Template, but have a unique identity from the rest of the StatefulSet."
msgstr ""

#: StatefulSetSpec.updateStrategy
msgid "updateStrategy indicates the StatefulSetUpdateStrategy that will be employed to update Pods in the StatefulSet when a revision is made to Template."
msgstr ""

#: StatefulSetSpec.volumeClaimTemplates
msgid "volumeClaimTemplates is a list of claims that pods are allowed to reference. The StatefulSet controller is responsible for mapping network identities to claims in a way that maintains the identity of a pod. Every claim in this list must have at least one matching (by name) volumeMount in one container in the template. A claim in this list takes precedence over any volumes in the template, with the same name."
msgstr ""

#: StatefulSetStatus
msgid "StatefulSetStatus represents the current state of a StatefulSet."
msgstr ""

#: StatefulSetStatus.collisionCount
msgid "collisionCount is the count of hash collisions for the StatefulSet. The StatefulSet controller uses this field as a collision avoidance mechanism when it needs to create the name for the newest ControllerRevision."
msgstr ""

#: StatefulSetStatus.conditions
msgid "Represents the latest available observations of a statefulset's current state."
msgstr ""

#: StatefulSetStatus.currentReplicas
msgid "currentReplicas is the number of Pods created by the StatefulSet controller from the StatefulSet version indicated by currentRevision."
msgstr ""

#: StatefulSetStatus.currentRevision
msgid "currentRevision, if not empty, indicates the version of the StatefulSet used to generate Pods in the sequence [0,currentReplicas)."
msgstr ""

#: StatefulSetStatus.observedGeneration
msgid "observedGeneration is the most recent generation observed for this StatefulSet. It corresponds to the StatefulSet's generation, which is updated on mutation by the API Server."
msgstr ""

#: StatefulSetStatus.readyReplicas
msgid "readyReplicas is the number of Pods created by the StatefulSet controller that have a Ready Condition."
msgstr ""

#: StatefulSetStatus.replicas
msgid "replicas is the number of Pods created by the StatefulSet controller."
msgstr ""

#: StatefulSetStatus.updateRevision
msgid "updateRevision, if not empty, indicates the version of the StatefulSet used to generate Pods in the sequence [replicas-updatedReplicas,replicas)"
msgstr ""

#: StatefulSetStatus.updatedReplicas
msgid "updatedReplicas is the number of Pods created by the StatefulSet controller from the StatefulSet version indicated by updateRevision."
msgstr ""

#: StatefulSetUpdateStrategy
msgid "StatefulSetUpdateStrategy indicates the strategy that the StatefulSet controller will use to perform updates. It includes any additional parameters necessary to perform the update for the indicated strategy."
msgstr ""

#: StatefulSetUpdateStrategy.rollingUpdate
msgid "RollingUpdate is used to communicate parameters when Type is RollingUpdateStatefulSetStrategyType."
msgstr ""

#: StatefulSetUpdateStrategy.type
msgid "Type indicates the type of the StatefulSetUpdateStrategy. Default is RollingUpdate."
msgstr ""
